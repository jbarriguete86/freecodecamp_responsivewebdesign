/*--    
    The span[class] syntax will target any span element that has a class attribute set, regardless of the attribute's value.
    The :not() pseudo-selector is used to target all elements that do not match the selector
--*/

/* 
You can use CSS to make elements with this class completely hidden from the visual page, but still be announced by screen readers.
    The CSS you are about to write is a common set of properties used to ensure elements are completely hidden visually.
    The CSS clip property is used to define the visible portions of an element. 
    The clip-path property determines the shape the clip property should take. 
    Set both the clip-path and -webkit-clip-path properties to the value of inset(50%), forming the clip-path into a rectangle within the element.
    To prevent the text content from overflowing, you need to set the overflow property as hidden and a white-space property set to nowrap.
    Finally, you need to take these hidden elements out of the document flow. you do this by setting the position property  to absolute, 
    a padding property set to 0, and a margin property set to -1px. 
    This will ensure that not only are they no longer visible, but they are not even within the page view.
    */
span[class~="sr-only"] {
    border: 0 !important;/* Rather than having to constantly double-check you are not overwriting your earlier properties, 
    you can use the !important keyword to ensure these properties are always applied, regardless of order or specificity.*/
    clip: rect(1px, 1px, 1px, 1px) !important;
    clip-path: inset(50%) !important;
    -webkit-clip-path: inset(50%) !important;
    height: 1px !important;
    width: 1px !important;
    position: absolute !important;
    overflow: hidden !important;
    white-space: nowrap !important;
    padding: 0 !important;
    margin: -1px !important;
  }
  
  html {
    box-sizing: border-box;
  }
  
  body {
    font-family: sans-serif;
    color: #0a0a23;
  }
  
  h1 {
    max-width: 37.25rem;
    margin: 0 auto;
    padding: 1.5rem 1.25rem;
  }
  
  h1 .flex {
    display: flex;
    flex-direction: column-reverse;
    gap: 1rem;
  }
  
  /*
  The :first-of-type pseudo-selector is used to target the first element that matches the selector.
  */
  h1 .flex span:first-of-type {
    font-size: 0.7em;
  }
 /* 
 The :first-of-type pseudo-selector is used to target the first element that matches the selector.
 */ 
  h1 .flex span:last-of-type {
    font-size: 1.2em;
  }
  
  section {
    max-width: 40rem;
    margin: 0 auto;
    border: 2px solid #d0d0d5;
  }
  
  #years {
    display: flex;
    justify-content: flex-end;
    position: sticky;
    top: 0;
    background: #0a0a23;
    color: #fff;
    z-index: 999;
    /*
    The calc() function is a CSS function that allows you to calculate a value based on other values. 
    For example, you can use it to calculate the width of the viewport minus the margin of an element:
    .example {
     margin: 10px;
     width: calc(100% - 20px);
    }
    */
    padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;
    margin: 0 -2px;
  }
  
  #years span[class] {
    font-weight: bold;
    width: 4.5rem;
    text-align: right;
  }
  
  .table-wrap {
    padding: 0 0.75rem 1.5rem 0.75rem;
  }
  
  table {
    border-collapse: collapse; /*border-collapse property to collapse allows cell borders to collapse into a single border, instead of a border around each cell*/
    border: 0;
    width: 100%;
    position: relative;
    margin-top: 3rem;
  }
  
  table caption {
    color: #356eaf;
    font-size: 1.3em;
    font-weight: normal;
    position: absolute;
    top: -2.25rem;
    left: 0.5rem;
  }
  
  tbody td {
    width: 100vw;
    min-width: 4rem;
    max-width: 4rem;
  }
  
  tbody th {
    width: calc(100% - 12rem);
  }
  
  tr[class="total"] {
    border-bottom: 4px double #0a0a23;
    font-weight: bold;
  }
  
  tr[class="total"] th {
    text-align: left;
    padding: 0.5rem 0 0.25rem 0.5rem;
  }
  
  tr.total td {
    text-align: right;
    padding: 0 0.25rem;
  }
  
  tr.total td:nth-of-type(3) {/*The :nth-of-type() pseudo-selector is used to target specific elements based on their order among siblings of the same type.*/
    padding-right: 0.5rem;
  }
  
  tr.total:hover {
    background-color: #99c9ff;
  }
  
  td.current { /* The key difference between tr[class="total"] and tr.total is that the first will select tr elements where the only class is total. 
    The second will select tr elements where the class includes total.*/
    font-style: italic;
  }
  
  tr.data {
    background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);
  }
  
  tr.data th {
    text-align: left;
    padding-top: 0.3rem;
    padding-left: 0.5rem;
  }
  
  tr.data th .description {
    display: block;
    font-weight: normal;
    font-style: italic;
    padding: 1rem 0 0.75rem;
    margin-right: -13.5rem;
  }
  
  tr.data td {
    vertical-align: top;
    padding: 0.3rem 0.25rem 0;
    text-align: right;
  }
  
  tr.data td:last-of-type {
    padding-right: 0.5rem;
  }

  /*------ GO BACK BUTTON ---*/

.btn-div {
    margin: 20px auto;
    text-align: right;
    height: 30px;

  }

  .go-back {
    color: black;
    font-style: normal;
    font-size: 30px;
    width: 300px;
    min-width: 120px;
    height: 70px;
    background-color: rgba(255,255,255, 0.8);
    border-radius: 10px;
  }

  .mm-link:link {
    text-decoration: none;
  }

  .mm-link:visited {
    text-decoration: none;
  }